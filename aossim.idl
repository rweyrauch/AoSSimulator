
enum Realm
{
    "Aqshy",
    "Azyr",
    "Chamon",
    "Ghur",
    "Ghyran",
    "Hysh",
    "Shyish",
    "Ulgu"
};

enum PlayerId
{
    "None",
    "Red",
    "Blue"
};

enum Verbosity
{
    "Silence",
    "Normal",
    "Narrative",
    "Debug"
};

enum ParamType
{
    "Boolean",
    "Integer",
    "Enum",
};

interface Unit {
    void Unit();

    long points();
    void restore();
};

interface ManoAMano {
    void ManoAMano(long numRounds, Realm realm);
    void combatants(Unit red, Unit blue);
    void start();
    void simulate();
    void next();
    boolean done();
    long currentRound();
    void logStatistics();
    PlayerId getVictor();
};

interface Parameter {
    void Parameter();
    attribute ParamType paramType;
    [Const] attribute DOMString name;
    attribute long intValue;
    attribute long minValue;
    attribute long maxValue;
    attribute long increment;
};

interface JSUnitInfo {
    void JSUnitInfo();
    [Const] attribute DOMString name;
    [Const] attribute Parameter parameters;
    attribute long numberOfParameters;
    attribute long grandAlliance;
    attribute long numberOfFactions;
    long getFaction(long which);
};

interface JSInterface {
    static void Initialize();
    static long GrandAllianceStringToKeyword(DOMString allianceName);
    static long FactionStringToKeyword(DOMString factionName);
    [Const] static DOMString GrandAllianceKeywordToString(long ga);
    [Const] static DOMString FactionKeywordToString(long faction);

    static Unit CreateUnit(DOMString name, [Const] Parameter parameters, long numParameters);
    static long GetNumberOfAvailableUnits();
    static void GetUnitInfo(long which, [Ref] JSUnitInfo info);
    [Const] static DOMString UnitParameterValueToString([Const] DOMString name, [Ref] Parameter parameter);
    static long UnitEnumStringToInt([Const] DOMString name, [Const] DOMString enumString);
};
