
enum Realm
{
    "Realm::None",
    "Realm::Aqshy",
    "Realm::Azyr",
    "Realm::Chamon",
    "Realm::Ghur",
    "Realm::Ghyran",
    "Realm::Hysh",
    "Realm::Shyish",
    "Realm::Ulgu"
};

enum PlayerId
{
    "PlayerId::None",
    "PlayerId::Red",
    "PlayerId::Blue"
};

enum ParamType
{
    "Boolean",
    "Integer",
    "Enum",
};

interface Wounds {
    void Wounds();

    attribute long normal;
    attribute long mortal;
};

interface Model {
    float x();
    float y();

    boolean slain();
    boolean fled();
};

interface Weapon {
    void Weapon();

    [Const] DOMString nameC();
    long range();
    long attacks();
    long toHit();
    long toWound();
    long rend();
    long damage();
    boolean isMissile();
    float strength();
};

interface Unit {
    void Unit();

    long wounds();
    long move();
    long bravery();
    long save();

    long points();
    long remainingModels();
    long remainingWounds();
    long remainingPoints();
    float basesizeInches();
    float x();
    float y();

    void restore();

    long numModels();
    [Const] Model getModel(long which);

    long getNumWeapons();
    [Const] Weapon getWeapon(long which);
};

interface UnitStatistics {
    void UnitStatistics();

    long numberOfRoundsMoved();
    long numberOfRoundsRan();
    long numberOfRoundsCharged();

    // Totals
    float totalMovementDistance();
    float averageMovementDistance();
    float totalRunDistance();
    float averageRunDistance();
    float totalChargeDistance();
    float averageChargeDistance();

    long totalSavesMade();
    long totalSavesFailed();

    long totalEnemyModelsSlain();
    void totalWoundsInflicted([Ref] Wounds wounds);

    long totalModelsSlain();
    void totalWoundsTaken([Ref] Wounds wounds);

    long totalModelsFled();
};

interface Parameter {
    void Parameter();
    attribute ParamType paramType;
    [Const] attribute DOMString name;
    attribute long intValue;
    attribute long minValue;
    attribute long maxValue;
    attribute long increment;
};

interface JSUnitInfo {
    void JSUnitInfo();
    [Const] attribute DOMString name;
    attribute long numberOfParameters;
    void getParameter(long which, [Ref] Parameter param);
    attribute long grandAlliance;
    attribute long numberOfFactions;
    long getFaction(long which);
};

interface JSInterface {
    static void Initialize();
    static long GrandAllianceStringToKeyword(DOMString allianceName);
    static long FactionStringToKeyword(DOMString factionName);
    [Const] static DOMString GrandAllianceKeywordToString(long ga);
    [Const] static DOMString FactionKeywordToString(long faction);

    static void CreateUnit(PlayerId which, DOMString name);
    static long AddUnitParameter(PlayerId which, [Ref] Parameter parameter);
    static void ClearUnitParameters(PlayerId which);

    static void BattleStart(long numRounds);
    static void BattleSimulate();
    static void BattleNext();
    static boolean BattleDone();
    static long BattleCurrentRound();
    static void GetStatistics(PlayerId which, [Ref] UnitStatistics stats);
    static void ClearStatistics();
    static PlayerId GetVictor();
    static float GetInitialRedX();
    static float GetInitialRedY();
    static float GetInitialBlueX();
    static float GetInitialBlueY();
    static float GetBoardWidth();
    static float GetBoardDepth();
    static Unit GetUnit(PlayerId which);

    static long GetNumberOfAvailableUnits();
    static void GetUnitInfo(long which, [Ref] JSUnitInfo info);
    static void GetUnitInfoByName([Const] DOMString name, [Ref] JSUnitInfo info);
    [Const] static DOMString UnitParameterValueToString([Const] DOMString unitName, [Const] DOMString paramName, long paramValue);
    static long UnitEnumStringToInt([Const] DOMString name, [Const] DOMString enumString);
    static long GetUnitPoints([Const] DOMString name, long numModels);
};
